{"version":3,"sources":["components/Centipede.js","components/Blotto.js","components/Score.js","App.js","reportWebVitals.js","index.js"],"names":["Centipede","props","useState","count","setCount","mainPot","setMainPot","sidePot","setSidePot","take","setTake","Math","floor","random","strategy","setStrategy","winner","setWinner","botAction","setBotAction","passGameScore","useEffect","sendScore","data","className","onClick","prevCount","prevPot","href","icon","faRedo","Blotto","botNumbers","setBotNumbers","total","setTotal","error","setError","bf1","bf2","bf3","values","setValues","maxValues","setMaxValues","permutations","valuesHandler","e","name","target","value","newValues","calcTotal","newTotal","parseInt","isNaN","difference","newMaxValues","roll","chooseNumbers","x","y","z","botStrategy","length","findResult","botNums","human","bot","Object","keys","forEach","key","onSubmit","preventDefault","botResult","type","id","min","max","onInput","disabled","Score","score","App","game","setGame","gameScore","setGameScore","totalScore","useCallback","prevGameScore","faChevronLeft","prevGame","faChevronRight","refreshPage","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.981beda6.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Centipede = (props) => {\r\n    const startingPot = 3;\r\n    const startingSidePot = 1;\r\n\r\n    const [count, setCount] = useState(0);\r\n    const [mainPot, setMainPot] = useState(startingPot);\r\n    const [sidePot, setSidePot] = useState(startingSidePot);\r\n    const [take, setTake] = useState(false);\r\n    const [strategy, setStrategy] = useState(Math.floor(Math.random() * 10));\r\n    const [winner, setWinner] = useState(false);\r\n    const [botAction, setBotAction] = useState(false);\r\n\r\n    const { passGameScore } = props;\r\n\r\n    const clearState = () => {\r\n        setCount(0);\r\n        setMainPot(startingPot);\r\n        setSidePot(startingSidePot);\r\n        setTake(false);\r\n        setStrategy(Math.floor(Math.random() * 10));\r\n        setWinner(false);\r\n        setBotAction(false);\r\n    }\r\n    \r\n    const handlePass = () => {\r\n        setCount(prevCount => prevCount + 1);\r\n        setMainPot(prevPot => prevPot * 2);\r\n        setSidePot(prevPot => prevPot * 2);\r\n\r\n        //handle bot decisions\r\n        if(count === 9 || count === strategy){\r\n            setWinner(false);\r\n            setTake(true);\r\n            setBotAction(false);\r\n        } else {\r\n            setMainPot(prevPot => prevPot * 2);\r\n            setSidePot(prevPot => prevPot * 2);\r\n            setBotAction(true);\r\n        }\r\n    };\r\n\r\n    const handleTake = () => {\r\n        setTake(true);\r\n        setWinner(true);\r\n        //sendScore(mainPot);\r\n    }\r\n\r\n    //when a winner is found enter winnings\r\n    //might have found a fix for score (usecallback on function in props)\r\n    useEffect(() => {    \r\n        const sendScore = (data) => {\r\n            passGameScore(data);\r\n        }\r\n        if(take === true){\r\n            if(winner === true){\r\n                sendScore(mainPot);\r\n            } else {\r\n                sendScore(sidePot);\r\n            }\r\n        }\r\n    }, [take, mainPot, sidePot, winner, passGameScore])\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    return (\r\n        <div className=\"centipede\">\r\n            <h2>Centipede Game</h2>\r\n            <p>\r\n                Two players take turns choosing to either take the main pot, or pass\r\n                to the other player. Payoffs are such that if one player (A) passes the pot to\r\n                the opponent and the opponent takes the pot, player A recieves the side pot - less than if they had \r\n                taken the main pot the previous turn. The main pot starts at ${startingPot}, the side pot at ${startingSidePot}, \r\n                and both are doubled every time a player passes. For this version there is a maximum of 10 rounds before the pot is taken. Your bot\r\n                opponent will use varying strategies to demonstrate possible scenarios.\r\n            </p>\r\n            <h3>Main Pot is ${mainPot}</h3>\r\n            <h3>Side Pot is ${sidePot}</h3>\r\n            <h3>Round is {count}</h3>\r\n            {take ? null : \r\n                <div className=\"options\">\r\n                    <button onClick={handlePass}>Pass</button>\r\n                    <button onClick={handleTake}>Take</button>\r\n                </div>\r\n            }\r\n            <h3>Bot Action: {botAction ? \"Pass\" : null}</h3>\r\n            {take ?\r\n            <div className=\"explanation\">\r\n                {winner ? <h3>You took the pot totalling ${mainPot}!</h3> : <h3>The bot took the pot totalling ${mainPot}! You got ${sidePot}.</h3>}\r\n                <p>\r\n                    The subgame perfect equilibrium (a refinement of the&nbsp;\r\n                    <a href='https://www.investopedia.com/terms/n/nash-equilibrium.asp'>nash equilibrium</a>) \r\n                    for Centipede tells us to take the pot on the first turn,\r\n                    which is established by the process of backwards induction. \r\n                    For example, if play reaches the last round between player A and B, and\r\n                    it's B's turn, B should take the pot or they will lose. Since B must take\r\n                    the pot that turn, A should take the pot on the second to last turn\r\n                    in order to win before B. Knowing this, B should take the pot on the third\r\n                    to last turn. This reasoning continues backwards through the game tree until\r\n                    one finds that the best action is the first player taking the main pot on the first round.\r\n                </p>\r\n                <p>\r\n                    In empirical tests few human players follow this rational strategy, and so\r\n                    recieve higher payoffs than the previously mentioned equilibrium. This is\r\n                    interesting because it highlights how the equilibria sometimes fail to predict human play.\r\n                </p>\r\n                <FontAwesomeIcon icon={faRedo} className=\"shuffle\" onClick={clearState} />\r\n            </div> \r\n            : null }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Centipede;","import React, {useState, useEffect} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\r\n\r\n//need to check total on submit to ensure its equal to resources\r\n\r\nconst Blotto = (props) => {\r\n    \r\n    const resources = 13;\r\n    const [winner, setWinner] = useState(false);\r\n    const [botNumbers, setBotNumbers] = useState(0);\r\n    const [total, setTotal] = useState(0);\r\n    const [error, setError] = useState(false);\r\n    const { passGameScore } = props;\r\n    const [values,setValues] = useState({\r\n        bf1:1,\r\n        bf2:1,\r\n        bf3:1,\r\n    })\r\n    const [maxValues,setMaxValues] = useState({\r\n        bf1:11,\r\n        bf2:11,\r\n        bf3:11,\r\n    })\r\n    const permutations = [\r\n        {bf1: 3, bf2: 5, bf3: 5},\r\n        {bf1: 5, bf2: 3, bf3: 5},\r\n        {bf1: 5, bf2: 5, bf3: 3},\r\n        {bf1: 3, bf2: 7, bf3: 3},\r\n        {bf1: 7, bf2: 3, bf3: 3},\r\n        {bf1: 3, bf2: 3, bf3: 7},\r\n        {bf1: 1, bf2: 5, bf3: 7},\r\n        {bf1: 5, bf2: 7, bf3: 1},\r\n        {bf1: 7, bf2: 1, bf3: 5},\r\n        {bf1: 7, bf2: 5, bf3: 1},\r\n        {bf1: 1, bf2: 7, bf3: 5},\r\n        {bf1: 5, bf2: 1, bf3: 7}\r\n    ];\r\n\r\n    const clearState = () => {\r\n        setWinner(false);\r\n        setBotNumbers(0);\r\n        setTotal(0);\r\n        setError(false);\r\n        setValues({bf1: 1, bf2: 1, bf3: 1});\r\n        setMaxValues({bf1: 11, bf2: 11, bf3: 11});\r\n    }\r\n\r\n    const valuesHandler = (e) => {\r\n        let name= e.target.name;\r\n        let value= e.target.value;\r\n        const newValues = {\r\n            ...values,\r\n            [name]: value\r\n        }\r\n        setValues(newValues)\r\n        calcTotal(newValues) \r\n    }\r\n    \r\n    const calcTotal = (newValues) => {\r\n        const { bf1, bf2, bf3} = newValues;\r\n        const newTotal = parseInt(bf1) + parseInt(bf2) + parseInt(bf3)\r\n        setTotal(newTotal);\r\n\r\n        //if a non-number is entered it disables input\r\n        if(isNaN(newTotal)){\r\n            setMaxValues({bf1: 0, bf2: 0, bf3: 0});\r\n            return;\r\n        }\r\n        const difference = resources-newTotal;\r\n        const newMaxValues = {\r\n            ...values,\r\n                \"bf1\": parseInt(bf1) + difference,\r\n                \"bf2\": parseInt(bf2) + difference,\r\n                \"bf3\": parseInt(bf3) + difference,\r\n        }\r\n        setMaxValues(newMaxValues);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(total === resources){\r\n            //allow to proceed\r\n            setError(false);\r\n            let botResult = botStrategy();\r\n            setBotNumbers(botResult); \r\n            findResult(botResult);\r\n        } else {\r\n            //ask for total resources to equal 13\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    function roll() {\r\n        return Math.floor(Math.random() * 11 + 1); //1-10\r\n     }\r\n\r\n    function chooseNumbers() {\r\n        var x = 0, y = 0, z = 0;\r\n        while (x + y + z !== 13) {\r\n           x = roll();\r\n           y = roll();\r\n           z = roll();\r\n        }\r\n        return {bf1: x, bf2: y, bf3: z};\r\n    }\r\n\r\n    function choosePermutation() {\r\n        return permutations[Math.floor(Math.random() * permutations.length)];\r\n    }\r\n\r\n    // For S = 13, choosing (3, 5, 5), (3, 3, 7) and (1, 5, 7) \r\n    //with probability 1/3 each can be shown to be the optimal probabilistic strategy.\r\n    //half the time follow optimal probabilistic, other half randomize\r\n    const botStrategy = () => {\r\n        var strat;\r\n        const roll = Math.floor(Math.random() * 10);\r\n        if(roll <= 5){\r\n            //optimal\r\n            strat = choosePermutation();\r\n        } else {\r\n            //random\r\n            strat = chooseNumbers();\r\n        }\r\n        return strat;\r\n    }\r\n\r\n    const findResult = (botNums) => {\r\n        let human = 0, bot = 0;\r\n        Object.keys(values).forEach( function (key) {\r\n            if (values[key] > botNums[key]){\r\n                human += 1;\r\n            } else if (botNums[key] > values[key]){\r\n                bot += 1;\r\n            } else {\r\n            }\r\n        });\r\n\r\n        if(human > bot){\r\n            setWinner('You won!');\r\n        } else if (bot > human) {\r\n            setWinner('The bot won!');\r\n        } else {\r\n            setWinner(\"It's a tie!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {    \r\n        const sendScore = (data) => {\r\n            passGameScore(data);\r\n        }\r\n        if(winner === 'You won!'){\r\n            sendScore(100);\r\n        } else {\r\n\r\n        }\r\n    }, [winner, passGameScore])\r\n\r\n\r\n    return (\r\n        <div className=\"centipede\">\r\n            <h2>Colonel Blotto Game</h2>\r\n            <p>\r\n                Two players distribute finite resources over several battlefields, with each\r\n                specific battle decided by whoever allocated more resources. In this version, players will record three\r\n                positive integers that add up to {resources}. The player who has two numbers\r\n                higher than the opponents wins the round (and gets $100 added to winnings), and if points are tied its a draw.\r\n            </p>\r\n            <form onSubmit={handleSubmit}>\r\n                <h3>Allocate your resources below:</h3>\r\n                <input type=\"number\" id=\"bf1\" value={values[\"bf1\"]} name=\"bf1\" min=\"1\" max={maxValues[\"bf1\"]} onInput={valuesHandler} />\r\n                <input type=\"number\"  id=\"bf2\" value={values[\"bf2\"]} name=\"bf2\" min=\"1\" max={maxValues[\"bf2\"]} onInput={valuesHandler}/>\r\n                <input type=\"number\" id=\"bf3\" value={values[\"bf3\"]} name=\"bf3\" min=\"1\" max={maxValues[\"bf3\"]} onInput={valuesHandler}/>\r\n                {winner ? null : \r\n                    <div className=\"submitBlottoDiv\">\r\n                        <button className=\"submitBlotto\" type=\"submit\">Submit</button>\r\n                    </div>\r\n                }\r\n                {error ? <p>Enter three numbers totaling {resources}.</p> : null}\r\n            </form>\r\n            {botNumbers !== 0 ?\r\n                <div className=\"input\">\r\n                    <h3>Bot Entered: </h3>\r\n                    <input type=\"number\" value={botNumbers.bf1} disabled={true} />\r\n                    <input type=\"number\" value={botNumbers.bf2} disabled={true} /> \r\n                    <input type=\"number\" value={botNumbers.bf3} disabled={true} />\r\n                </div>\r\n                : null}\r\n            {winner ? \r\n                <div className=\"explanation\">\r\n                    <h3>{winner}</h3> \r\n                    <p>\r\n                        With resources above 12 deterministic strategies are not optimal.\r\n                        For example, if resources were 6, (2, 2, 2) would be optimal as it at worst breaks even against other strategies,\r\n                        and at best beats one. For resources equal to 13, choosing between (3, 5, 5), (3, 3, 7), and (1, 5, 7)\r\n                        with 1/3 probability each is shown to be the optimal probabilistic strategy. Applications for this game in real life\r\n                        include military and political strategy as well as strategic hiring decisions. One example of this is two companies \r\n                        vying over the same candidates, resuling in many reasonable offers or aggressive offers for a subset of candidates.\r\n                    </p>\r\n                </div>\r\n            : null}\r\n            {winner ? <FontAwesomeIcon icon={faRedo} onClick={clearState} className=\"shuffle\"/> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blotto;","import React from 'react'\r\n\r\nconst Score = (props) => {\r\n\r\n    return (\r\n        <div className=\"score\">\r\n            <h3>Winnings: ${props.score}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score;","import './App.css';\nimport React, {useCallback, useState} from 'react'\nimport Centipede from './components/Centipede';\nimport Blotto from './components/Blotto';\nimport Score from './components/Score';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\n\n//have a winnings section to track how well the person does over all games - should we include bot winnings?\n//Kuhn poker\n//Traveler's dilemma\n\n\nfunction App() {\n  const [game, setGame] = useState(0);\n  const [gameScore, setGameScore] = useState(0);\n  const gameCount = 1;\n\n  const handleNext = () => {\n    if( game === gameCount){\n\n    } else {\n      setGame(prevGame => prevGame + 1);\n    }\n  }\n\n  const handlePrev = () => {\n    if(game !== 0){\n      setGame(prevGame => prevGame - 1);\n    }\n  }\n\n  function refreshPage(){\n    window.location.reload();\n  }\n\n  const totalScore = useCallback((data) => {\n    setGameScore(prevGameScore => prevGameScore + data);\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Understanding Game Theory</h1>\n      </header>\n      <Score score={gameScore} />\n      <FontAwesomeIcon icon={faChevronLeft} className=\"shuffle\" onClick={handlePrev}/>\n      <FontAwesomeIcon icon={faChevronRight} className=\"shuffle\" onClick={handleNext}/>\n      {game === 0 ? <Centipede refreshPage={refreshPage} passGameScore={totalScore}/> : null}\n      {game === 1 ? <Blotto  passGameScore={totalScore} /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}